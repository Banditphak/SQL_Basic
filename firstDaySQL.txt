-- SQL = Stand for Structured Query Language
-- SQL = lets you access and manipulate database
-- What can SQL do?
-- SQL can execute queries against the database
-- SQL it can retrieve data from the database
-- SQL can insert record into the database
-- SQL can also update records in the database
-- SQL can delete records in the dabase
-- SQL can allow us to view the database schema and tables.
-- PostgreSQL is a RDBMS database. (MySQL, Oracle, SQLserver..)
-- RDBMS = Relational Databases Management System
--- Statements ---
-- The SELECT statement is used to select data from a database.
-- The SELECT DISTINCT statement is used to return distinct (different) values.
-- The WHERE clause is used to filter records.
-- Select Statements
-- We use Select to query the database SQL keywords are not case sensitive
-- select can also be SELECT
-- Useful SQL Commands 
-- SELECT, UPDATE, DELETE, INSERT INTO, CREATE DATABASE, ALTER TABLE, CREATE TABLE
-- DROP TABLE
-- EXECUTING QUERIES
-- Example: Query all the results from the customer table
SELECT * FROM customer;
-- Query all the results from actor
SELECT * FROM actor;
-- Query all the results from city
SELECT * FROM city;
-- Query all the results from film
SELECT * FROM film;
-- Query all the results from category
SELECT * FROM category;
-- Query all the results from film_actor
SELECT * FROM film_actor;
-- Query all the results from inventory
SELECT * FROM inventory;
-- Query all the results from payment
SELECT * FROM payment;
------------------------------------------------------------------------------------

-- Example on SELECT statement
-- Query specific columns
-- Query name results only for category
SELECT name FROM category;
-- Query store_id and film_id from inventory
SELECT store_id, film_id FROM inventory;
-- Query any active customers and their first name from Customer Table
SELECT active, first_name FROM customer;
-- Query the city_id and postal_code from address table
SELECT city_id, postal_code FROM Address;
-- Query the first name and their actor id for Actor table
SELECT first_name, actor_id FROM actor;
-- Query I want to know the store id for Store table
SELECT Store_id FROM Store;
-- SQL Select Distinct
-- Write a query that returns unique values from rating in film table
SELECT DISTINCT rating FROM film;
-- Student Practice
-- Write a query to display unique staff id from rental table
SELECT DISTINCT staff_id FROM rental;
-- Fetch the unique store ids for inventory
SELECT DISTINCT Store_id FROM inventory;
-- Fetch the unique values for country_id for city table
SELECT DISTINCT country_id FROM city;
-----------------------------------------------------------------------------

-- SQL WHERE Clause
-- EXAMPLE: Fetch the data from category table and return only those 
-- name equal to Action
SELECT * FROM category WHERE name = 'Action';
-- STUDENT EXAMPLE: 
-- Query 
Select * from customer;
-- Query firstname and actor id from actor table whos name is Zero
select first_name, actor_id from actor where first_name = 'Zero';
-- Query last name from actor table whos name is first name is Uma
select last_name from actor where first_name = 'Uma';
-- Fetch data from address for those city id that equal 449
Select distinct city_id from address where city_id = '449';
-- fetch phone number for those districts called California
select distinct phone from address where district ='California';
-- Fetch the city for those with country id 60
select distinct city from city where country_id = '60';
-- Fetch the city for those with country id 107
select distinct city from city where country_id = '107';
-- Query the Country for country id 102
select country from country where country_id = '102';
-- Query store id for the customers whose address id is 45
select store_id from customer where address_id = '45';
-- Query email address for customer with name Marie
select email from customer where first_name = 'Marie';
-- Query the email address and customer id for Debra Nelson
select email from customer where first_name = 'Debra' and last_name = 'Nelson';
---------------------------------------------------------------------------------------

-- AND, OR
select phone from address where address = '23 Workhaven Lane' and district = 'Alberta';
select email from customer where first_name = 'Debra' or last_name = 'Turner';
-- SQL AND, OR
-- EXAMPLE: Fetch the phone number for address 23 Workhaven Lane and district Alberta
SELECT phone FROM address
WHERE address = '23 Workhaven Lane'
AND district = 'Alberta'
-- Student Practice
-- Query the postcode code for district Lima and city_id 305
select postal_code 
from address 
where district = 'Lima' 
and city_id = '305';
-- Query address and address id for city id 85 and postal code 60304
select address, address_id  
from address 
where city_id = '85' 
and postal_code = '60304';
-- Fetch the email for Linda Williams
select  email 
from customer
where first_name ='Linda' 
and last_name = 'Williams';
-- Fetch the full name for customer id 403 and address id 408
select first_name,last_name 
from customer 
where customer_id ='403' 
and address_id = '408';
-- Fetch name and email for either Danny Isom or Tony Carranza
select first_name as name, email 
from customer
where first_name = 'Danny' 
and last_name = 'Isom' 
or  first_name = 'Tony' 
and last_name = 'Carranza';
------------------------------------------------------------------------------

-- SQL ORDER BY keyword
-- The ORDER BY keyword is used to sort the result-set in ascending order or descending order
-- ORDER BY
select * from customer order by last_name DESC; 
-- SQL ORDER BY keyword
-- The ORDER BY keyword is used to sort the result-set in ascending order or descending order
SELECT * FROM film
ORDER BY title DESC
-- Query all results based on ratings in desc order
Select * From film Order By rating DESC;
-- Query films with highest rental rate first
Select * from film Order By rental_rate DESC;
-- Fetch the customer id and rental id for customers with ID 341 and display list starting with
-- highest amount. -- ask of what? == amount
select customer_id, rental_id, amount from payment where customer_id = 341 order by amount desc;
select * from payment;
---------------------------------------------------------------------------------------
--SQL is null operator
--A field with a null value is a field with no value
--Example for null
Select * From address
Where address2 Is null;

Select * From address 
Where address2 
Is Not null;

Select * From address 
Where address 
Is Not null;

Select * From staff where picture is null;

---------------------------------------------------------------------------------------

-- SQL SELECT LIMIT (MYSQL, ORACLE use TOP)
-- LIMIT is a clause use to specify number of records to return
-- EXAMPLE:  Query the first 3 results for address table
SELECT * FROM address LIMIT 3;
-- QUERY the last 3 results from table country
Select * From country 
Order by country desc Limit 3 ;
-- Fetch the first 10 results for film
Select * from film Limit 10;
-- Fetch the first 2 customers with store id = 1
Select * from customer where store_id = '1'  Limit 2;
-- Query the address and phone number for district QLD return 1 result in desc from Address table
Select address,phone from address where district = 'QLD' Order By address DESC Limit 1;
-- Query the 3 highest replacements cost for all movies rated R table film
Select * From film Where rating = 'R' Order By replacement_cost DESC Limit 3;
---------------------------------------------------------------------------------------
-- AGG_FUNC()
-- BETWEEN
-- SQL MIN, MAX  < or >  and Arithmetic Functions
-- The MIN() function returns the smallest value from the selected column
-- The MAX() function returns the largest values from the selected Column
SELECT * FROM payment where amount = 11.99;	
SELECT MIN(amount) FROM payment;
SELECT MAX(amount) FROM payment;
SELECT customer_id, amount FROM payment where amount > 11.00;
SELECT customer_id, amount FROM payment where amount < 11.00;
Select * from film;
-- Add an arithmetic function
SELECT rental_duration, rental_duration + 1 AS “newPromotionalRate”
FROM film limit 10;
-- BETWEEN EXAMPLE: Query all the results for film table where the replacement cost is between 12.99 and 15.99
SELECT * FROM film
WHERE replacement_cost BETWEEN 12.99 AND 15.99;
-- Student Practice Query: Fetch the total count for unique values in address table for column post code
Select count(Distinct postal_code) as postalCount from address;
-- Query the count function to determine the number of different languages in the language table.
Select Count(name) from language;
-- Query the max amount for payment table
Select Max(amount) from payment;
-- Query customer_id for amount less than 5.99 (payment table)
Select customer_id from payment where amount < 5.99;
-- Query all the results for amounts between 2.99 and 5.99
Select * from payment where amount between 2.99 and 5.99;
-- Query rental_date and inventory_id for those customer_id between 250 and 400 for customer_id in desc order (rental Table)
Select rental_date, inventory_id From rental where customer_id between 250 and 400 Order By customer_id DESC;
-- Query results for customer_id greater than 350 for rental table order by customer_id asc order
Select customer_id From rental Where customer_id > 350 Order By customer_id ASC;
-- Query title for movies add $1 fee to rental_rate as RATEWITHTIP and display original rental rate next to TIP
Select title, rental_rate, rental_rate + 1 As "RATEWITHTIP" From film;
----------------------------------------------------------------------------------------

-- COUNT, AVG, SUM
Select Count(*) From address;
Select  Sum(city_id) From address;
select * from address;
SELECT district, SUM(city_id) as update_time
FROM address
GROUP BY district;
-- COUNT, AVG, SUM
-- The COUNT() Function returns the number of rows that matches a specific criteria. 

SELECT * FROM FILM
SELECT count(length) FROM film;

-- AVG() function returns the average value of a number column
-- Query the average replacement cost for film table
SELECT AVG(replacement_cost) FROM Film;

-- THE SUM() function returns the total sum of any numberic value
SELECT SUM(rental_rate) FROM film;

-- STUDENT PRACTICE:
-- Student: Query average rental rate for movies rated G  for film table
Select avg(rental_rate) from film where rating ='G';
-- Student: Query the sum for the replacement cost  for film
Select sum(replacement_cost) from film ;
--------------------------------------------------------------------------------------------
-- QUERY using LIKE
-- THE LIKE operator is used in a WHERE clause to search for specific pattern in a column.
-- There are wildcards often used in conjunction with the LIKE OPERATOR

-- The percent sign (%) represents zero, one or Multiples character
-- The underscore sign (_) represents one, single character.

-- Query last name for individuals whose name starts with Ni From actor table.
SELECT * FROM actor;
SELECT * FROM actor WHERE first_name like 'Ni%';
-- Query last name for individuals whose name contains al in between.
SELECT * FROM actor WHERE first_name like 'Va_';
-- Student: Query the count from actor table whose last name ends with son
Select * From actor Where last_name like '%son';
-- Any lastName contain %ee%
Select * From actor Where last_name like '%ee%';
----------------------------------------------------------------------------------

-- SQL IN Operator
-- IN Operator allows you to specify multiple values in the WHERE clause
-- IN Operator is a shorthand for multiple OR conditions

-- Query the results only for those movies with Rating R and PG using IN operator.
SELECT * FROM film;
SELECT * FROM film WHERE rating IN('R', 'PG');

-- Query the results only for those movies with Rating R and PG using NOT IN operator.
SELECT * FROM film WHERE rating NOT IN('R', 'PG');

-- STUDENT: Query all the records for rental_duration that are IN 4 and 6
Select * From film Where rental_duration in(4, 6);
-- Query the title for film table for decription that contains butler'
Select title, description From film where description Like '%Butler%';
----------------------------------------------------------------------------------
-- Aliases
-- STUDENT: Query the title and the year it was released as new_Movie_release from film table
Select (title || ' / ' || release_year) As "NewMovieRelease" From film;
------------------------------------------------------------------------------------

-- SQL JOIN
-- A JOIN clause is used to combine rows from two or more tables, based on related column between them

-- There are different types of SQL JOINS
-- HERE is a list of some:

-- (INNER) JOIN: Returns records that have matching values in both tables
-- LEFT (OUTER) JOIN: Returns all records from the left table, and the matching records from the right table
-- RIGHT (OUTER) JOIN: Returns all records from the right table and the matching records form the left table
-- FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table.

-- QUERY: First name customer_id, last name, amount, payment date and order by payment date;
SELECT customer.customer_id, customer.first_name, customer.Last_name, payment.amount, payment.payment_date
FROM customer
INNER JOIN payment
ON customer.customer_id = payment.customer_id
ORDER BY payment.payment_date;

-- STUDENT: Query customer id, firstname lastname email amount payment date for customer id = 2 (customer, payment tables)
Select C.customer_id, C.first_name, C.last_name, C.email, P.amount, P.payment_date
FROM customer C
INNER JOIN payment P
ON C.customer_id = P.customer_id
Where  P.customer_id = 2 ;
-- Since both rables have the same customer_id colum you can use the syntax using
Select C.customer_id, C.first_name, C.last_name, C.email, P.amount, P.payment_date
FROM customer C
JOIN payment P
Using(customer_id)
Where C.customer_id = 2 ;
-- Combine more than 2 tables
-- display customer_id, first name as customer_first_name, last_name as customer_last_name, 
-- first name as staff_first_name, last name as staff_last_name
-- Amount, and payment_date
SELECT c.customer_id, 
c.first_name AS customer_first_name, 
c.last_name AS customer_last_name, 
s.first_name AS staff_first_name, 
s.last_name AS staff_last_name, 
p.amount, 
p.payment_date
FROM customer c
JOIN payment p
USING(customer_id)
JOIN staff s
USING(staff_id)
-- SQL LEFT JOIN
-- The LEFT JOIN returns all records from the left table (table1) and the matching records from 
-- the right table (Table2). The result is 0 records from the right side if there is no match
-- Query the current inventory_id for movie titles verify if there are movies with no inventory assigned order by title
SELECT * FROM film;
SELECT * FROM inventory;
SELECT f.film_id, f.title, i.inventory_id
FROM film f
LEFT JOIN inventory i
USING(film_id)
ORDER BY title;
-- Query film that are not in the inventory_id or have null value for inventory_id display film_id, title, inventory_id order by asc title
SELECT f.film_id, f.title, i.inventory_id
FROM film f
LEFT JOIN inventory i
USING(film_id)
WHERE i.inventory_id IS NULL
ORDER BY title;
SELECT f.film_id, f.title, i.inventory_id
FROM film f
LEFT JOIN inventory i
USING(film_id)
WHERE i.inventory_id IS NOT NULL
ORDER BY title;
--------------------------------------------------------
-- UNIONS
-- GROUP BY
-- HAVING
